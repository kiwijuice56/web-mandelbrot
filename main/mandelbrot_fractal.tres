[gd_resource type="Shader" format=2]

[resource]
code = "shader_type canvas_item;

// The bounds of the graph, set by fractal_navigation.gd
uniform highp float x_min = -2; uniform highp float x_max = 2;
uniform highp float y_min = -2; uniform highp float y_max = 2;

uniform float width = 1000;
uniform float height = 800;
uniform float angle = 0.0;

uniform highp vec2 mouse_pos;

// How fast the palette is cycled through, proportional to the change in `TIME`
uniform float shimmer_speed = 0.1;

uniform bool oversample = true;
uniform bool burning_ship = false;
uniform bool julia = false;
uniform int palette = 4;

// http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl
vec3 hsv2rgb(vec3 c) {
	vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
	return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

// Coloration: This part is not relevant to the mandelbrot calculation, so you can
// modify it for different palettes. Most palettes use the iteration count `iter` to match
// a pixel to a color on a gradient. The parameter `mu` is a decimal number in the range
// [0, 1] that is functionally equivalent to `iter / max_iter`, but with some extra math 
// to reduce the color banding: http://linas.org/art-gallery/escape/escape.html
vec3 color_cell(float mu, vec2 uv) {
	if (mu == 1.0) {
		return vec3(0.0);
	}
	float shimmer_mu = mu + TIME * shimmer_speed;
	
	// Keep ratio in range [0, 1.0] since we are adding a large constant, TIME
	shimmer_mu -= floor(shimmer_mu);
	
	if (palette == 1) {
		return hsv2rgb(vec3(shimmer_mu, 0.65, 1.0));
	} else if (palette == 2) {
		return vec3( shimmer_mu < 0.5 ? shimmer_mu * 2.0 : 2.0 - 2.0 * shimmer_mu);
	} else if (palette == 3) {
		return hsv2rgb(vec3(mod(TIME / 32.0, 1.0), 1.0 - sqrt(mu), sqrt(mu)));
	} else if (palette == 4) { 
		float scaled_shimmer = shimmer_mu * 4.0;
		scaled_shimmer -= floor(scaled_shimmer);
		float cyclic_scaled_mu = scaled_shimmer < 0.5 ? scaled_shimmer * 2.0 : 2.0 - 2.0 * scaled_shimmer;
		cyclic_scaled_mu *= 0.7;
		return vec3(cyclic_scaled_mu, 0.5 + cyclic_scaled_mu, 0.8 + cyclic_scaled_mu);
	} else if (palette == 5) { 
		float scaled_shimmer = mu * (4.0 + sin(TIME) * 2.0);
		scaled_shimmer -= floor(scaled_shimmer);
		float cyclic_scaled_mu = scaled_shimmer < 0.5 ? scaled_shimmer * 2.0 : 2.0 - 2.0 * scaled_shimmer;
		cyclic_scaled_mu *= 0.45;
		return vec3(0.5 - cyclic_scaled_mu, 0, 0.15 - cyclic_scaled_mu);
	} else {
		return vec3(0.0);
	}
}

vec3 mandelbrot(vec2 uv) {
	highp float x = x_min + uv.x * (x_max - x_min);
	highp float y = y_min + uv.y * (y_max - y_min);
	
	float xtemp = x;
	x = x * cos(angle) - y * sin(angle);
	y = y * cos(angle) + xtemp * sin(angle);
	
	highp float x0 = x;
	highp float y0 = y;
	
	int iter = 0;
	vec3 col = vec3(0.0);
	
	// https://en.wikipedia.org/wiki/Mandelbrot_set
	// WebGL has a limitation that won't allow the shader to compile
	// if a non-constant is used in for-loops; 256 is `MAX_ITER`
	for (int i = 0; i < 256; i++) {
		xtemp = x * x - y * y + (julia ? mouse_pos.x : x0);
		y = 2.0 * x * y + (julia ? mouse_pos.y : y0);
		x = xtemp;
		iter++;
		if (x * x + y * y > 4.0) 
			break;
	}
	
	if (iter == 256) {
		col = color_cell(1.0, uv);
	} else {
		// Here is where we calculate `mu` for coloration
		
		// We take some extra iterations for a smaller error in the coloration
		for (int extra_iter = 0; extra_iter < 4; extra_iter++) {
			xtemp = x * x - y * y + (julia ? mouse_pos.x : x0);
			y = 2.0 * x * y + (julia ? mouse_pos.y : y0);
			x = xtemp;
			iter++;
		}
		
		highp float modulus = sqrt(x * x + y * y);
		highp float mu = max(0, (float(iter) - log(log(modulus)) / log(2.0))) / 256.0;
		
		// `mu` is still in the range [0, 1], but the curve is shifted to spread the color
		// values farther from the high iteration values, which are rarely reached
		mu = sqrt(mu);  
		col = color_cell(mu, uv);
	}
	
	return col;
}

void fragment() {
	if (oversample) {
		COLOR.rgb = vec3(0.0);
		vec2 uv_size = vec2(1.0 / width, 1.0 / height) / 4.0;
		for (float i = -1.0; i <= 1.0; i++) {
			for (float j = -1.0; j <= 1.0; j++) {
				COLOR.rgb += mandelbrot(UV - uv_size * vec2(i, j)) / 9.0;
			}
		}
	} else {
		COLOR.rgb = mandelbrot(UV);
	}
}"
