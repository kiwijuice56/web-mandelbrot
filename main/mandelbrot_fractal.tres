[gd_resource type="Shader" format=2]

[resource]
code = "// The main rendering script of the Mandelbrot fractal
shader_type canvas_item;

// Bounds of the graph, set by fractal_input.gd
uniform highp float x_min = 512; uniform highp float x_max = 512;
uniform highp float y_min = 512; uniform highp float y_max = 512;

// How fast the palette is cycled through, proportional to the change in `TIME`
uniform float shimmer_speed = 0.1;

// http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl
vec3 hsv2rgb(vec3 c) {
	vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
	return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

// Coloration: This part is not very relevant to the actual calculation, so you can
// modify it for different palettes. Most palettes use the iteration count `iter` to match
// a pixel to a color on a gradient. The parameter `mu` is a decimal number in the range
// [0, 1] that is functionally equivalent to `iter / max_iter`, but with some extra math 
// to reduce the color banding: http://linas.org/art-gallery/escape/escape.html
vec3 color_cell(float mu) {
	float shimmer_mu = mu + TIME * shimmer_speed;
	
	// Keep ratio in range [0, 1.0] since we are adding a large constant, TIME
	shimmer_mu -= floor(shimmer_mu);
	
	return hsv2rgb(vec3(shimmer_mu, 0.6, 1.0));
}

vec3 mandelbrot(vec2 uv) {
	highp float x = x_min + uv.x * (x_max - x_min);
	highp float y = y_min + uv.y * (y_max - y_min);
	highp float x0 = x; highp float y0 = y;
	
	int iter = 0;
	vec3 col = vec3(0.0);
	
	// https://en.wikipedia.org/wiki/Mandelbrot_set
	// For some reason, WebGL has some odd limitations that won't allow the shader to compile
	// if a non-constant is used for loops
	for (int i = 0; i < 256; i++) {
		highp float xtemp = x * x - y * y + x0;
		y = 2.0 * x * y + y0;
		x = xtemp;
		iter++;
		if (x * x + y * y > 4.0) {
			break;
		}
	}
	
	if (iter == 256) {
		col = vec3(0.0);
	} else {
		// Here is where we calculate `mu` for coloration
		
		// We take some extra iterations for a smaller error in the coloration
		for (int extra_iter = 0; extra_iter < 4; extra_iter++) {
			// x = abs(x); y = abs(y); Uncomment for burning ship fractal
			highp float xtemp = x * x - y * y + x0;
			y = 2.0 * x * y + y0;
			x = xtemp;
			iter++;
		}
		
		highp float modulus = sqrt(x * x + y * y);
		highp float mu = max(0, (float(iter) - log(log(modulus)) / log(2.0))) / 256.0;
		
		// `mu` is still in the range [0, 1], but the curve is shifted to spread the color
		// values farther from the high iteration values, which are rarely reached
		mu = sqrt(mu);  
		col = color_cell(mu);
	}
	
	return col;
}

void fragment() {
	
	vec2 s = SCREEN_PIXEL_SIZE / 2.0;
	COLOR.rgb = (mandelbrot(UV + vec2(0.0, 0.0)) + mandelbrot(UV + vec2(s.x, 0.0)) + mandelbrot(UV + vec2(s.x, s.y)) + mandelbrot(UV + vec2(0.0, s.y))) / 4.0;
}"
